 public static Map<String, String> getStdIDFromADService(Set<String> userRecords, int partitionSize,  String subjectType) {
        Map<String, String> resultMap = new HashMap<String, String>();
        LDAPConnection con = null;
        SocketFactory socketFactory = null;
        String subjectFormat = null;

        String ldapHost = Config.getConfigValue("AD_HOST");
        int ldapPort = Integer.valueOf(Config.getConfigValue("AD_PORT"));
        String bindDn = Config.getConfigValue("AD_BINDDN");
        String bindPw = Config.getConfigValue("AD_PWD");
        String userIdAttr = "sAMAccountName";

        
        List<List<String>> partitions = getPartitionedList(userRecords, partitionSize);

        if(subjectType.equalsIgnoreCase("email")) {
            subjectFormat = "mail";
            userIdAttr = "sAMAccountName"; // need to change
        } else if(subjectType.equalsIgnoreCase("pno")) {
            subjectFormat = "employeeID";
            userIdAttr = "sAMAccountName";
        } else{
            subjectFormat = "sAMAccountName";
            userIdAttr = "sAMAccountName";
        }
        SearchResult results = null;
        
        try {
            socketFactory = SSLSocketFactory.getDefault();
            System.setProperty("jdk.tls.client.protocols", "TLSv1.2");
            con = new LDAPConnection(socketFactory, ldapHost, ldapPort, bindDn, bindPw);
            logger.info("Connected to AD server for converting " + userRecords.size() + " " + subjectFormat + " to Standard IDs");
            
            String baseDn = Config.getConfigValue("AD_BASEDN");
            String standardId = "", inputId = "";
            String returnAttrs[] = { userIdAttr };
            List<Filter> filters = new ArrayList<Filter>();
            SearchRequest searchRequest = null;
            Filter filter = null;
            Filter acctypeFilter = null;

            for (List<String> subjectSubLst : partitions) {
                for (String subject : subjectSubLst) {
                    filters.add(Filter.createEqualityFilter(subjectFormat, subject));
                }
                filter = Filter.createORFilter(filters);
                
                filters = new ArrayList<Filter>();
                filters.add(Filter.createEqualityFilter(BOFA_ACC_TYPE, "Elevated"));
                filters.add(Filter.createEqualityFilter(BOFA_ACC_TYPE, "Primary"));
                acctypeFilter =  Filter.createORFilter(filters);
                
                filters = new ArrayList<Filter>();
                filters.add(filter);
                filters.add(acctypeFilter);
                filter = Filter.createANDFilter(filters);
