// 1. Navigating to "Manage Token" Page
    @When("the user navigates to the Manage Token page")
    public void the_user_navigates_to_manage_token_page() {
        driver.findElement(By.xpath("//a[text()='User']")).click();
        driver.findElement(By.xpath("//a[text()='Manage Token']")).click();
    }

    @Then("the Manage Token page should be displayed")
    public void the_manage_token_page_should_be_displayed() {
        WebElement header = driver.findElement(By.xpath("//h1[contains(text(),'Manage Token')]"));
        Assert.assertTrue(header.isDisplayed());
    }

    // 2. Filling in Token Search Fields and Searching
    @When("the user enters Token Serial Number {string}")
    public void the_user_enters_token_serial_number(String tokenSerial) {
        driver.findElement(By.id("tokenSerialNumber")).sendKeys(tokenSerial);
    }

    @And("enters First Name {string} and Last Name {string}")
    public void the_user_enters_first_name_and_last_name(String firstName, String lastName) {
        driver.findElement(By.id("firstName")).sendKeys(firstName);
        driver.findElement(By.id("lastName")).sendKeys(lastName);
    }

    @And("enters Scotia ID {string}")
    public void the_user_enters_scotia_id(String scotiaId) {
        driver.findElement(By.id("scotiaId")).sendKeys(scotiaId);
    }

    @And("selects Allocation Date {string}")
    public void the_user_selects_allocation_date(String allocationDate) {
        Select allocationDropdown = new Select(driver.findElement(By.id("allocationDate")));
        allocationDropdown.selectByVisibleText(allocationDate);
    }

    @And("clicks on Search button")
    public void the_user_clicks_on_search_button() {
        driver.findElement(By.xpath("//button[text()='Search']")).click();
    }

    @Then("the search results should be displayed")
    public void the_search_results_should_be_displayed() {
        WebElement resultsTable = driver.findElement(By.id("resultsTable"));
        Assert.assertTrue(resultsTable.isDisplayed());
    }

    // 3. Validating "Allocate Tokens" Button on the Manage Token Page
    @Then("the Allocate Tokens button should be enabled")
    public void the_allocate_tokens_button_should_be_enabled() {
        WebElement allocateButton = driver.findElement(By.xpath("//button[text()='Allocate Tokens']"));
        Assert.assertTrue(allocateButton.isEnabled());
    }

    @When("the user clicks on Allocate Tokens button")
    public void the_user_clicks_on_allocate_tokens_button() {
        driver.findElement(By.xpath("//button[text()='Allocate Tokens']")).click();
    }

    // 4. Validating Allocate Token Page Elements
    @Then("the Allocate Token page should be displayed with prepopulated values")
    public void the_allocate_token_page_should_be_displayed_with_prepopulated_values() {
        WebElement header = driver.findElement(By.xpath("//h1[contains(text(),'Allocate Token')]"));
        Assert.assertTrue(header.isDisplayed());

        Select communityDropdown = new Select(driver.findElement(By.id("communityName")));
        Assert.assertEquals("WIRE PAYMENT", communityDropdown.getFirstSelectedOption().getText());

        Select applicationDropdown = new Select(driver.findElement(By.id("application")));
        Assert.assertEquals("All Applications", applicationDropdown.getFirstSelectedOption().getText());
    }

    // 5. Selecting Community Name and Application
    @When("the user selects Community Name {string}")
    public void the_user_selects_community_name(String communityName) {
        Select communityDropdown = new Select(driver.findElement(By.id("communityName")));
        communityDropdown.selectByVisibleText(communityName);
    }

    @When("the user selects Application {string}")
    public void the_user_selects_application(String application) {
        Select applicationDropdown = new Select(driver.findElement(By.id("application")));
        applicationDropdown.selectByVisibleText(application);
    }

    // 6. Entering User ID and Token
    @When("the user enters User ID {string}")
    public void the_user_enters_user_id(String userId) {
        driver.findElement(By.id("userId")).sendKeys(userId);
    }

    @And("enters Token {string}")
    public void the_user_enters_token(String token) {
        driver.findElement(By.id("token")).sendKeys(token);
    }

    @And("clicks on Allocate Tokens button in Allocate Token page")
    public void the_user_clicks_allocate_tokens_in_allocate_token_page() {
        driver.findElement(By.xpath("//button[text()='Allocate Tokens']")).click();
    }

    @Then("a success message {string} should be displayed")
    public void a_success_message_should_be_displayed(String expectedMessage) {
        WebElement successMessage = driver.findElement(By.id("successMessage"));
        Assert.assertEquals(expectedMessage, successMessage.getText());
    }

    // 7. Reset Button Functionality
    @When("the user clicks on Reset button")
    public void the_user_clicks_on_reset_button() {
        driver.findElement(By.xpath("//button[text()='Reset']")).click();
    }

    @Then("all fields should be cleared in Allocate Token page")
    public void all_fields_should_be_cleared_in_allocate_token_page() {
        Assert.assertEquals("", driver.findElement(By.id("userId")).getAttribute("value"));
        Assert.assertEquals("", driver.findElement(By.id("token")).getAttribute("value"));

        Select communityDropdown = new Select(driver.findElement(By.id("communityName")));
        Assert.assertEquals("WIRE PAYMENT", communityDropdown.getFirstSelectedOption().getText());

        Select applicationDropdown = new Select(driver.findElement(By.id("application")));
        Assert.assertEquals("All Applications", applicationDropdown.getFirstSelectedOption().getText());
    }
