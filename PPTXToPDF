import org.apache.poi.xslf.usermodel.XMLSlideShow;
import org.apache.poi.xslf.usermodel.XSLFSlide;
import org.apache.pdfbox.pdmodel.*;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;

public class PPTXToPDFConverter {
    public static byte[] convertPPTXToPDF(byte[] pptData) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(pptData);
             ByteArrayOutputStream pdfOutputStream = new ByteArrayOutputStream();
             PDDocument pdfDocument = new PDDocument()) {

            XMLSlideShow ppt = new XMLSlideShow(inputStream);
            Dimension slideSize = ppt.getPageSize();
            
            for (XSLFSlide slide : ppt.getSlides()) {
                // High-resolution image for better quality
                int width = slideSize.width * 2;
                int height = slideSize.height * 2;
                
                BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
                Graphics2D graphics = img.createGraphics();

                // Enable anti-aliasing for better text rendering
                graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                graphics.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
                graphics.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                
                // Transparent background
                graphics.setComposite(AlphaComposite.Clear);
                graphics.fillRect(0, 0, width, height);
                graphics.setComposite(AlphaComposite.SrcOver);
                graphics.setColor(Color.WHITE);
                graphics.fillRect(0, 0, width, height);

                // Render slide
                slide.draw(graphics);
                graphics.dispose();

                // Convert BufferedImage to PDImageXObject
                PDPage page = new PDPage(new PDRectangle(width / 2, height / 2)); // Scale down for PDF
                pdfDocument.addPage(page);

                PDImageXObject pdImage = PDImageXObject.createFromByteArray(pdfDocument, toByteArray(img), "slide");
                try (PDPageContentStream contentStream = new PDPageContentStream(pdfDocument, page)) {
                    contentStream.drawImage(pdImage, 0, 0, width / 2, height / 2);
                }
            }

            pdfDocument.save(pdfOutputStream);
            return pdfOutputStream.toByteArray();
        }
    }

    // Convert BufferedImage to byte array (PNG format)
    private static byte[] toByteArray(BufferedImage image) throws IOException {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        ImageIO.write(image, "png", outputStream);
        return outputStream.toByteArray();
    }
}
