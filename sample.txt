    @When("the user clicks on the {string} tab")
    public void click_on_tab(String tabName) {
        driver.findElement(By.xpath("//a[text()='" + tabName + "']")).click();
    }

    @And("clicks on the {string} button")
    public void click_on_button(String buttonName) {
        driver.findElement(By.xpath("//button[text()='" + buttonName + "']")).click();
    }

    @Then("the Allocate Token page should be displayed")
    public void validate_allocate_token_page() {
        WebElement pageHeader = driver.findElement(By.xpath("//h1[contains(text(),'Allocate Token')]"));
        Assert.assertTrue("Allocate Token page is not displayed!", pageHeader.isDisplayed());
    }

    @When("the user selects {string} from the {string} dropdown")
    public void select_from_dropdown(String option, String dropdownName) {
        String dropdownId = dropdownName.equalsIgnoreCase("Community Name") ? "communityName" : "application";
        Select dropdown = new Select(driver.findElement(By.id(dropdownId)));
        dropdown.selectByVisibleText(option);
    }

    @And("enters User ID {string} and Token {string}")
    public void enter_user_details(String userId, String token) {
        driver.findElement(By.id("userId")).sendKeys(userId);
        driver.findElement(By.id("token")).sendKeys(token);
    }

    @Then("the system should accept the selection without errors")
    public void validate_application_selection() {
        WebElement applicationDropdown = driver.findElement(By.id("application"));
        Assert.assertTrue("Application dropdown is not displayed!", applicationDropdown.isDisplayed());
    }

    @When("the user selects an invalid application")
    public void select_invalid_application() {
        Select applicationDropdown = new Select(driver.findElement(By.id("application")));
        applicationDropdown.selectByVisibleText("All Applications"); // Assuming this is not a valid selection
    }

    @Then("an error message should be displayed indicating selection is required")
    public void validate_application_selection_error() {
        WebElement errorMessage = driver.findElement(By.xpath("//div[contains(@class,'error') and contains(text(),'Please select an application first')]"));
        Assert.assertTrue("Application selection error message not displayed!", errorMessage.isDisplayed());
    }

    @When("the user clicks Allocate Token without entering required fields")
    public void click_allocate_without_data() {
        driver.findElement(By.id("submitButton")).click();
    }

    @Then("an error message should be displayed indicating missing fields")
    public void validate_missing_fields_error() {
        WebElement errorMessage = driver.findElement(By.xpath("//div[contains(@class,'error')]"));
        String expectedErrorMessage = "Please select an application first for allocating a token to a customer\nPlease enter a User ID\nPlease scan a token to allocate";
        Assert.assertEquals("Error message mismatch!", expectedErrorMessage, errorMessage.getText());
    }

    @And("clicks on the submit button multiple times")
    public void click_submit_multiple_times() {
        WebElement submitButton = driver.findElement(By.id("submitButton"));
        for (int i = 0; i < 3; i++) {
            submitButton.click();
        }
    }

    @Then("the system should prevent multiple submissions")
    public void validate_no_multiple_submissions() {
        WebElement loadingSpinner = driver.findElement(By.id("loadingSpinner"));
        Assert.assertTrue("Multiple submissions are not blocked!", loadingSpinner.isDisplayed());
    }

    @Then("all fields should be cleared and validate dropdown values")
    public void validate_reset_functionality() {
        Assert.assertTrue("User ID field is not cleared!", driver.findElement(By.id("userId")).getText().isEmpty());
        Assert.assertTrue("Token field is not cleared!", driver.findElement(By.id("token")).getText().isEmpty());

        Select communityDropdown = new Select(driver.findElement(By.id("communityName")));
        Assert.assertEquals("Community Name reset failed!", "WIRE PAYMENT", communityDropdown.getFirstSelectedOption().getText());

        Select applicationDropdown = new Select(driver.findElement(By.id("application")));
        Assert.assertEquals("Application reset failed!", "All Applications", applicationDropdown.getFirstSelectedOption().getText());
    }
